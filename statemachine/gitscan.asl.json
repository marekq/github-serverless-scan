{
  "Comment": "Scan the GitHub repositories of a user using Lambda",
  "StartAt": "Generate Scan ID",
  "States": {
    "Generate Scan ID": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "FunctionName": "${tokenlambda}",
        "Payload": {  
          "GithubRepo.$": "$.GithubRepo"
       }
      },
      "Next": "ParallelState"
    },
    "ParallelState": {
      "Type":"Parallel",
      "InputPath":"$",
      "OutputPath":"$",
      "Next":"Create Report",
      "Comment":"This is a parallel state",
      "Branches": [
        {
          "StartAt":"Pass Scan ID",
          "States":{
            "Pass Scan ID": {
              "Type": "Pass",
              "InputPath":"$",
              "OutputPath":"$",
              "Comment":"Succeed state",
              "End": true
            }
          }
        },
        {
          "StartAt": "Run GitHub Discovery",
          "States": {
            "Run GitHub Discovery": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "ResultPath": "$",
              "Parameters": {
                "FunctionName": "${scanlambda}",
                "Payload": {  
                  "GithubRepo.$": "$.GithubRepo",
                  "ScanID.$": "$.ScanID"
               }
              },
              "Next": "Process Scan Results"
            },
            "Process Scan Results": {
              "Type": "Map",
              "End": true,
              "ItemsPath": "$.Payload",
              "OutputPath": null,
              "Parameters": {
                "msg.$": "$$.Map.Item.Value"
              },
              "Iterator": {
                "StartAt": "Run GitHub Scan",
                "States": {
                  "Run GitHub Scan": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "OutputPath": "$.Payload",
                    "Retry": [
                      {
                        "ErrorEquals": [ "States.ALL" ],
                        "IntervalSeconds": 1,
                        "BackoffRate": 2,
                        "MaxAttempts": 3
                      }
                    ],
                    "Parameters": {
                      "FunctionName": "${lintlambda}",
                      "Payload": {  
                        "message.$": "$.msg"
                     }
                    },
                    "End": true
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Create Report": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "InputPath": "$",
      "Parameters": {
        "FunctionName": "${reportlambda}",
        "Payload": {  
          "Data.$": "$"
        }
      },
      "Next": "Finish"
    },
    "Finish": {
      "Type": "Succeed",
      "InputPath": "$",
      "OutputPath": "$"
    }
  }
}